---
sudo: required

env:
  global:
    # https://github.com/travis-ci/travis-ci/issues/6461#issuecomment-239577306
    DOCKER_VERSION: "1.9.1-0~trusty"
  matrix:
    - distro: ubuntu1604
      init: /lib/systemd/systemd
      run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
      playbook: test.yml

services:
  - docker

before_install:
  # Downgrade to older version of Docker engine.
  - sudo apt-get update
  - sudo apt-get remove docker-engine -yq
  - sudo apt-get install docker-engine=$DOCKER_VERSION -yq --no-install-suggests --no-install-recommends --force-yes -o Dpkg::Options::="--force-confnew"

  # Pull container
  - 'sudo docker pull geerlingguy/docker-${distro}-ansible:latest'

script:
  - container_id=$(mktemp)

  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} geerlingguy/docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Check whether bash and kill are installed
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm whereis bash'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm whereis kill'

  # Install dependencies.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible --version'
  - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  # http://serverfault.com/questions/803079/what-is-the-correct-syntax-of-defining-role-dependencies-in-the-meta-main-yml-in: - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # test whether systemd exist
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls /etc | grep systemd'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls /etc/systemd'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Check whether verdaccio is installed
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm whereis verdaccio'

  # Test whether /home/verdaccio has been created.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /etc/passwd | grep verdaccio'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls /home'

  # Test role idempotence.
  - idempotence=$(mktemp)
  - sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Test whether verdaccio is running.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm systemctl status verdaccio'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm apt-get install -y iproute'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ss -nat'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ss -nat | grep 4873'

  # Test whether verdaccio could be stopped.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm systemctl stop verdaccio'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ss -nat'

  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

after_failure:
  #placeholder Check MySQL settings.
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql/error.log'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
